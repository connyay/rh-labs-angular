@import "compass";
@import "breakpoint";

// Layout Settings
//==================================================================*/
  html {
    font-size: 100%;
  }

  // Media Queries
  //--------------------------------------------------------------*/
  $xs: 480px;
  $sm: 768px;
  $md: 992px;
  $lg: 1200px;


  $base_font_size: 16px;

  $base_font_family: 'Overpass', Arial, Helvetica, sans-serif;


  // Color Settings
  //==================================================================*/

    // Brand Specific
    //--------------------------------------------------------------*/
    $brand-primary: #CC0000;
    $brand-primary-med: #9e292b;
    $brand-primary-drk: #781f1C;

    $text_color: #646464;
    $gray: #d9d9d9;

    $labs_form_font: #646464;

    $button-font-color: #fff;

    // Information and Validation
    //--------------------------------------------------------------*/
    $brand_info: #428bca;
    $brand_error: #d9534f;
    $brand_success: #5cb85c;


    // Text and Links
    //--------------------------------------------------------------*/
    $link_color: $brand_info;
    $link_color_hover: darken($link_color, 15%);


    // Form Block Hover
    //==================================================================*/
    $form_block_hover: #f7f7f7;


  // Typography Settings
  //==================================================================*/

    // Headings
    //--------------------------------------------------------------*/
    $header_font_weight: bold;
    $header_font_style: normal;
    $header_line_height: 1.3;
    $header_top_margin: 5px;
    $header_bottom_margin: 20px;
    $header_text_rendering: optimizeLegibility;

    $h1_font_size: 49px;
    $h2_font_size: 49px;
    $h3_font_size: 20px;
    $h4_font_size: 23px;
    $h5_font_size: 18px;
    $h6_font_size: 16px;


    // Paragraphs
    //--------------------------------------------------------------*/
    $paragraph_font_weight: normal;
    $paragraph_font_size: $base_font_size;
    $paragraph_line_height: 26px;
    $paragraph_margin_bottom: 20px;
    $paragraph_text_rendering: optimizeLegibility;


    // Links
    //--------------------------------------------------------------*/
    $link_text_decoration: none;


    // Blockquotes
    //--------------------------------------------------------------*/
    $blockquote_padding: 10px 20px;
    $blockquote_margin: 0 0 20px;


  // Alerts Settings
  //==================================================================*/
    $alertbox_font_color: #fff;
    $alertbox_margin: 16px;


  // Media Settings
  //==================================================================*/
    $figure_background: #000;
    $figure_margin: 0 0 16px;
    $figure_opacity: .9;
    $figure_opacity_hover: 1;


  // Forms Settings
  //==================================================================*/
    $form_margin: 0 0 16px;


  // Buttons Settings
  //==================================================================*/
    $button_padding: 11px;
    $button_background: $brand_primary;
    $button_text_color: #fff;


  // Table Settings
  //==================================================================*/
    $table_cell_padding: 8px;
    $table_cell_border: 1px solid $brand_primary;


  %vertical-align {
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  }

  @mixin v-align {
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  }

  %reset {
    margin: 0;
    padding: 0;
  }

  // Button mixin
  @mixin button($text-color, $bg-color) {
    font: 12px bold sans-serif;
    border: none;
    line-height: 1;
    @include box-shadow(none);
    @include button-color($text-color, $bg-color);
    //&:hover, &:focus { @include button-color($text-color, lighten($bg-color, 10%)); }
    &:active { background: darken($bg-color, 5%); }
  }

  // Color button mixin
  @mixin button-color($text-color, $bg-color) {
    color: $text-color;
    background: $bg-color;
  }


// Convert Px to Rem
// =================================================================/

  // Global Convert
  // -------------------------------------------------------------/
  @mixin rem($property, $values) {

    // Create a couple of empty lists as output buffers.
    $font-size: $base_font_size;
    $px-values: ();
    $rem-values: ();

    // Loop through the $values list
    @each $value in $values {

      // For each property value, if it's in rem or px, derive both rem and
      // px values for it and add those to the end of the appropriate buffer.
      // Ensure all pixel values are rounded to the nearest pixel.
      @if $value == 0 or $value == 0px {

        // 0 -- use it without a unit
        $px-values: join($px-values, 0);
        $rem-values: join($rem-values, 0);

      } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {

        // px value given - calculate rem value from font-size
        $new-rem-value: $value / $font-size;
        $px-values: join($px-values, round($value));
        $rem-values: join($rem-values, #{$new-rem-value}rem);

      } @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {

        // % value given - don't add px or rem
        $px-values: join($px-values, #{$value});
        $rem-values: join($rem-values, #{$value});

      } @else if $value == auto {

        // auto - don't add px or rem
        $px-values: join($px-values, auto);
        $rem-values: join($rem-values, auto);

      } @else {

        // unitless value - use those directly as rem and calculate the px-fallback
        $px-values: join($px-values, round($value * $font-size));
        $rem-values: join($rem-values, #{$value}rem);

      }

    }

    // output the converted rules
    #{$property}: $px-values;
    #{$property}: $rem-values;

  }

  @mixin font-size($size, $line: $size * 1.4){
    font-size: ($size);
    font-size: ($size / $base_font_size) + rem;
    line-height: $line; //Fallback in px
    line-height: ($line / $base_font_size) + rem;
  }

  @mixin media-query($point) {
    @if($point == xs) {
      @include breakpoint($xs, $no-query: true) {
        @content;
      }
    }
    @elseif($point == sm) {
      @include breakpoint($sm, $no-query: true) {
        @content;
      }
    }
    @elseif($point == md) {
      @include breakpoint($md, $no-query: true) {
        @content;
      }
    }
    @elseif($point == lg) {
      @include breakpoint($lg, $no-query: true) {
        @content;
      }
    }
    @elseif($point == xl) {
      @include breakpoint($xl, $no-query: true) {
        @content;
      }
    }
    @elseif($point == xs-max) {
      @include breakpoint(max-width $xs, $no-query: true) {
        @content;
      }
    }
    @elseif($point == sm-max) {
      @include breakpoint(max-width $sm, $no-query: true) {
        @content;
      }
    }
    @elseif($point == md-max) {
      @include breakpoint(max-width $md, $no-query: true) {
        @content;
      }
    }
    @elseif($point == lg-max) {
      @include breakpoint(max-width $lg, $no-query: true) {
        @content;
      }
    }
    @elseif($point == xl-max) {
      @include breakpoint(max-width $xl, $no-query: true) {
        @content;
      }
    }

  }


// Inline Retina Display Media Query
// =================================================================/

  @mixin at2x($image, $width, $height) {

    @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6/2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
      background-image: url($image);
      background-size: $width $height;
    }

  }

  @font-face {
  font-family: 'kitchensink';
  src:url('https://mnolting.usersys.redhat.com/labs/kitchensink/fonts/kitchensink.eot?-ltsgd7');
  src:url('https://mnolting.usersys.redhat.com/labs/kitchensink/fonts/kitchensink.eot?#iefix-ltsgd7') format('embedded-opentype'),
    url('https://mnolting.usersys.redhat.com/labs/kitchensink/fonts/kitchensink.woff?-ltsgd7') format('woff'),
    url('https://mnolting.usersys.redhat.com/labs/kitchensink/fonts/kitchensink.ttf?-ltsgd7') format('truetype'),
    url('https://mnolting.usersys.redhat.com/labs/kitchensink/fonts/kitchensink.svg?-ltsgd7#kitchensink') format('svg');
  font-weight: normal;
  font-style: normal;
}

[class^="icon-"], [class*=" icon-"] {
  font-family: 'kitchensink';
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;

  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.icon-expand:before {
  font-family: 'kitchensink';
  content: "\65";
}

.icon-code:before {
  font-family: 'kitchensink';
  content: "\e600";
}

body {

}

body, .wrapu, .wrapi {
  min-width: 0;
}

.menu-wrapper {
  display: none;
}

.labs-subnav {
  position: absolute;
  right: 0;
  top: -10px;
  z-index: 999999;

  width: 300px;

  .menu {
    @include rem('padding', 16px);
    margin: 0;

    background: #fff;
    list-style-type: none;
    display: none;
    @include border-radius(8px 30px 8px 8px);
    border: 6px solid #ddd;

    li {

      @include transition-duration(.4s);

      &:hover {
        background: #ddd;
      }

      &.active {
        background: #ddd;
      }
    }

    a {
      width: 100%;
      @include rem('padding', 2px);

      display: block;
      text-decoration: none;
      text-transform: uppercase;
      color: #cc0000;

    }
  }

  .nav-icon {
    position: absolute;
    right: 0;
    top: 0;
    z-index: 9999;

    width: 50px;
    height: auto;

    display: block;

    img {
      width: 100%;
      height: auto;
    }

    &:hover {
      cursor: pointer;
    }
  }
}

.labs-subnav-container {
  position: relative;
  float: right;
}
